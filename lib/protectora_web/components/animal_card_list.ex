defmodule ProtectoraWeb.Components.AnimalCardList do
  @moduledoc """
  A sample component generated by `mix surface.init`.
  """
  use Phoenix.LiveComponent

  require Logger

  def mount(socket) do
    if connected?(socket), do: Protectora.Animais.subscribe()

    assigns = [
      animais: Protectora.Animais.list_animal_paginated()
    ]

    {:ok, assign(socket, assigns)}
  end

  def handle_info({:animal_created, animal}, socket) do
    {:noreply,
     update(socket, :animais, fn animais ->
       [animal | animais]
     end)}
  end

  def render(assigns) do
    ~H"""
    <div class="content" id="animals list">
      <div class="container mx-auto">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mx-12 my-12">
            <%= for animal <- @animais do %>
            <div class="flex justify-center">
              <.live_component module={ProtectoraWeb.Components.Card} id={animal.id} animal={animal} rounded/>
            </div>
          <% end %>
        </div>
      </div>
    </div>
    """
  end
end
